import sys
from typing import Dict, Any

from dnslib import DNSRecord, RCODE
from dnslib.server import BaseResolver, DNSServer, DNSLogger

from config_parser import parse_server_config
from malware import base
from util import validate_ip, validate_port, info, error


class Server:
    def __init__(self, config: Dict[str, any]):
        self.config = _validate_server_config(config)

        # Load malware server
        server = parse_server_config(config)

        self.resolver = CustomResolver(server)
        self.dns_server = DNSServer(address=self.config['server']['ip'], port=self.config['server']['port'],
                                    resolver=self.resolver, logger=CustomLogger(server.logger))

    def start(self):
        self.dns_server.start()


class CustomLogger(DNSLogger):

    def __init__(self, logger):
        self.pylogger = logger

    def log_custom(self, *args):
        pass

    def log_data(self, dnsobj):
        return self.log_custom()

    def log_prefix(self, handler):
        return self.log_custom()

    def log_recv(self, handler, data):
        return self.log_custom()

    def log_send(self, handler, data):
        return self.log_custom()

    def log_request(self, handler, request: DNSRecord):
        info(f"[Received] {request.q.qname}")
        self.pylogger.info(f"received@@@{request.q.qname}")
        return self.log_custom()

    def log_reply(self, handler, reply):
        return self.log_custom()

    def log_truncated(self, handler, reply):
        return self.log_custom()

    def log_error(self, handler, e):
        return self.log_custom()


class CustomResolver(BaseResolver):

    def __init__(self, malware: base.Server):
        self.malware = malware

    def resolve(self, request: DNSRecord, handler):
        response = self.malware.receive(request)

        # Send refused reply when malware cannot respond to query
        if response is None:
            response = request.reply()
            response.header.rcode = getattr(RCODE, 'REFUSED')

        return response


def _validate_server_config(config: Dict[Any, Any]) -> Dict[Any, Any]:
    if not config:
        error("[Server] No configuration file provided.")
        sys.exit(-1)

    if "server" not in config:
        error("[Server] Server section missing in configuration file.")
        sys.exit(-1)

    # IP / Port
    if "ip" in config['server']:
        config['server']['ip'] = validate_ip(config['server']['ip'])
    else:
        error("[Server] IP configuration missing.")
        sys.exit(-1)

    config['server']['port'] = validate_port(config['server']['port']) if "port" in config['server'] else 53

    info(f"[Server] Server listening on {config['server']['ip']}:{config['server']['port']}")

    return config
