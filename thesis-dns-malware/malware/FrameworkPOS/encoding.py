import codecs

# Source: https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/another-brick-in-the-frameworkpos/
SUBST_ALPHABET = '^=/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm;no.pqrstuvwxyz'
INDEX_ALPHABET = 'ILMxgTnvbzVtBiry3=X^KWQAG847oYdFZlR1NPe5j/mS0hODs.aU2qkCJ6H;wcu9fpE'


def encode_label(data: str, xor_key=0xAA) -> str:
    replaced = bytearray()

    # Replace space by dot
    data = data.replace(" ", ".")

    for char in data:
        if char in SUBST_ALPHABET:
            char = INDEX_ALPHABET[SUBST_ALPHABET.index(char)]
        replaced.append(ord(char) ^ xor_key)

    hex_chars = codecs.encode(replaced, "hex")
    return hex_chars.decode("ascii")


def decode_label(request: str, xor_key=0xAA) -> str:
    output = ''

    data = codecs.decode(bytes(request, "ascii"), "hex")
    for char in data:
        char = chr(char ^ xor_key)
        output += SUBST_ALPHABET[INDEX_ALPHABET.index(char)] if char in INDEX_ALPHABET else char
    return output


if __name__ == "__main__":
    # print(
    #     encode_label("4936789994171949"), "\n",
    #     "dcd2fed0d2fefecdc8d2c4c8c8fecdde", "\n",
    #     "^MelissaJordan^340332388..B67.67497093623419^YasirPollard^97",
    #     encode_label("^MelissaJordan^340332388..B67"), "\n",
    #     "e3e29f9a9ff9cbc79fdae3fcc4d2c8c4cdd0feded295e9e9e9e9e9e9feea", "\n",
    #     encode_label("67497093623419^YasirPollard^97"), "\n",
    #     "e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9", "\n",
    #     encode_label("106268827"), "\n",
    #     "e9e9e9e9e9e9e9e9e9e9", "\n",
    # )


    # print(decode_label("dcd2fed0d2fefecdc8d2c4c8c8fecdde"))  # len == 16
    # print(decode_label("e3e29f9a9ff9cbc79fdae3fcc4d2c8c4cdd0feded295e9e9e9e9e9e9feea"))  # len == 30
    # print(decode_label("e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9"))  # len == 30
    # print(decode_label("e9e9e9e9e9e9e9e9e9e9"))  # len == 10

    print(decode_label("dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8"))
    print(decode_label("e6dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8e9dcdcdec8ded2feded0d2c8fc"))