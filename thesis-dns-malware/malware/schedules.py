import random
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, Tuple, Optional


class Schedule(ABC):
    @abstractmethod
    def get_interval(self):
        pass


class TypeA(Schedule):
    """
    Schedule with a variable amount of entries to exfiltrate per given interval.
    {
        "interval": 3,
        "default": "0;5",
        "override": {
            "14": "10;20"
        }
    }
    """

    def __init__(self, schedule: Dict[str, Any]):
        self.schedule: Dict[str, Any] = schedule or {
            'interval': 3,  # seconds
            'default': (0, 0)  # (min, max) per interval
        }

    def get_interval(self):
        return self.schedule['interval']

    def lookup(self, time=None):
        if not time:
            time = datetime.now()
        hour = int(time.hour)
        if 'override' in self.schedule and hour in self.schedule['override']:
            setting = self.schedule['override'][hour]
        else:
            setting = self.schedule['default']

        # Return random value in range
        return random.randint(*setting)


class TypeB(Schedule):
    """
    Schedule with a fixed amount of entries to exfiltrate per hour.
    {
        "12": 100,
        "13": 150,
        ...
        "20": 25
    }
    """

    def __init__(self, schedule: Dict[int, Any]):
        self.schedule = schedule or {}

    def get_interval(self, time=None) -> Tuple[int, Optional[int]]:
        if not time:
            time = datetime.now()
        hour = int(time.hour)

        num_cards = None
        if hour in self.schedule and self.schedule[hour] >= 0:
            num_cards = self.schedule[hour]

        return hour, num_cards
